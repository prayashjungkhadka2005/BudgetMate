@page "/"
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using BudgetMate.Components.Services
@inject UserService UserService

@layout FirstLayout


<style>
    .login-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    }

    .login-header {
    text-align: center;
    margin-bottom: 1.5rem;
    width: 100%;
    max-width: 28rem;
    color: white;
    }


    .login-header h1 {
    font-size: 1.875rem;
    font-weight: 700;
    }

    .login-form-container {
    background-color: #ffffff;
    padding: 3rem;
    border-radius: 0.5rem;
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    width: 400px;
    }

    .form-group {
    margin-bottom: 1rem;
    }

    .form-group label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: #4a5568;
    }

    .form-group input,
    .form-group select {
    width: 100%;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    padding: 0.5rem;
    margin-top: 0.25rem;
    outline: none;
    transition: border-color 0.3s, box-shadow 0.3s;
    }

    .form-group input:focus,
    .form-group select:focus {
    border-color: #FE6C05;
    box-shadow: 0 0 0 3px rgba(254, 108, 5, 0.3);
    }

    .login-button {
    width: 100%;
    background-color: #FE6C05;
    color: #ffffff;
    font-size: 18px;
    font-weight: 300;
    border-radius: 0.375rem;
    padding: 0.75rem;
    margin-top: 1rem;
    cursor: pointer;
    border: none;
    }

    .signup {
    text-align: center;
    margin-top: 1rem;
    }

    .signup span {
    color: darkblue;
    font-weight: bold;
    cursor: pointer;
    }
</style>

<div class="login-container">
    <div class="login-header">
        <h1>Login to BudgetMate</h1>
    </div>

    <div class="login-form-container">
        <form >

            <div class="form-group">
                @if (!string.IsNullOrEmpty(message))
                {
                    <p style="color: @(isSuccess ? "green" : "red"); padding-top:1rem; text-align: center;" aria-live="polite">@message</p>
                }
            </div>

            <div class="form-group">
                <label for="Username">Username</label>
                <input type="text" @bind="username" id="Username" name="Username" placeholder="Enter your username" />
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" @bind="password" id="Password" name="Password" placeholder="Enter your password" />
            </div>

            <button type="button" class="login-button" @onclick="LoginUser">Login</button>


            <div class="signup">
                Not registered yet? <span> <a href="/register" style="text-decoration: none"> Signup Now</a></span>
            </div>
        </form>
    </div>
</div>


@code{
    private string username;
    private string password;

    private string message;
    private bool isLoading = false;
    private bool isSuccess = false;

    private async Task LoginUser()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            message = "Please provide both username and password.";
            isSuccess = false;
            return;
        }


        try
        {
       

            var user = UserService.LoginUser(username, password);

            if (user != null)
            {
                message = "Login successful!";
                isSuccess = true;
                await Task.Delay(500); 
                NavigationManager.NavigateTo("/overview");
            }
            else
            {
                message = "Invalid username or password.";
                isSuccess = false;
            }
            
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }
       
    
}
}
