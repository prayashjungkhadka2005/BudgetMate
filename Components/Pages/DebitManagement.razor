@page "/debitmanagement"
@using BudgetMate.Components.Services
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@inject BudgetMate.Components.Services.UserService UserService


<h3>Transaction Management</h3>
<div style="text-align: right; margin: 10px;">
    <button @onclick="SortByDate" class="sort-btn">Sort by Date</button>
</div>

<table class="transactions-table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Amount</th>
            <th>Tags/Source</th>
            <th>Note</th>
            <th>Type</th> <!-- New column added -->
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.TransactionDate</td>
                <td>$@transaction.Amount</td>
                <td>@string.Join(", ", string.IsNullOrEmpty(transaction.Tags) ? new List<string>() : transaction.Tags.Split(',').ToList())</td>
                <td>@(transaction.Note ?? "No note added")</td>
                <td>@transaction.Type</td> <!-- Assuming 'Type' is a property of the 'Transaction' model -->
                <td>
                    <button class="add-note-btn" @onclick="() => OpenNoteModal(transaction)">Add/Update Note</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (isNoteModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h4>Add or Update Note</h4>
            <textarea @bind="selectedTransaction.Note" placeholder="Enter a note..."></textarea>
            <div class="modal-actions">
                <button @onclick="SaveNote">Save</button>
                <button @onclick="CloseNoteModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Transaction> transactions = new();
    private Transaction selectedTransaction;
    private bool isNoteModalOpen = false;
    private bool isSortedAscending = true; // Tracks the current sorting order

    protected override void OnInitialized()
    {
        transactions = UserService.GetAllTransactions(); // Fetch all transactions
    }

    private void OpenNoteModal(Transaction transaction)
    {
        selectedTransaction = transaction;
        isNoteModalOpen = true;
    }

    private void CloseNoteModal()
    {
        isNoteModalOpen = false;
        selectedTransaction = null;
    }

    private void SaveNote()
    {
        if (selectedTransaction != null)
        {
            UserService.UpdateNote(selectedTransaction.TransactionID, selectedTransaction.Note);
        }
        isNoteModalOpen = false;
        selectedTransaction = null;
        StateHasChanged(); // Refresh the UI
    }

    private void SortByDate()
    {
        if (isSortedAscending)
        {
            transactions = transactions.OrderBy(t => t.TransactionDate).ToList(); // Sort by ascending
        }
        else
        {
            transactions = transactions.OrderByDescending(t => t.TransactionDate).ToList(); // Sort by descending
        }

        isSortedAscending = !isSortedAscending; // Toggle sorting order for next click
        StateHasChanged(); // Refresh the UI
    }
}


<style>
    .sort-btn {
        background-color: #28a745;
        color: white;
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .sort-btn:hover {
            background-color: #218838;
        }

    h3 {
        text-align: center;
        margin: 20px 0;
    }

    .transactions-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px auto;
    }

        .transactions-table th, .transactions-table td {
            text-align: center;
            padding: 10px;
            border: 1px solid #ccc;
        }

        .transactions-table th {
            background-color: #f8f8f8;
        }

    .add-note-btn {
        background-color: #007bff;
        color: white;
        padding: 5px 10px;
        border: none;
        cursor: pointer;
    }

        .add-note-btn:hover {
            background-color: #0056b3;
        }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .modal-content h4 {
            margin-bottom: 15px;
        }

        .modal-content textarea {
            width: 100%;
            height: 100px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
        }

    .modal-actions {
        text-align: right;
    }

        .modal-actions button {
            background-color: #007bff;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 10px;
        }

            .modal-actions button:hover {
                background-color: #0056b3;
            }

            .modal-actions button:last-child {
                background-color: #6c757d;
            }

                .modal-actions button:last-child:hover {
                    background-color: #5a6268;
                }
</style>
