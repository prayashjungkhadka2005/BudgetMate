@page "/overview"
@inject IJSRuntime JSRuntime
@using BudgetMate.Components.Services
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject BudgetMate.Components.Services.UserService UserService

<h1>Dashboard</h1>
<div class="overview-container">
    <div class="col">
        <div class="title">Total Balance</div>
        <div class="value">$@TotalBalance</div>
    </div>
    <div class="col">
        <div class="title">Total inflows</div>
        <div class="value">$@TotalInflows</div>
    </div>

    <div class="col">
        <div class="title">Total outflows</div>
        <div class="value">$@TotalOutflows</div>
    </div>

    <div class="col">
        <div class="title">Total debt</div>
        <div class="value">$@TotalDebt</div>
    </div>

    <div class="col">
        <div class="title">Cleared debt</div>
        <div class="value">$@ClearedDebts</div>
    </div>

    <div class="col">
        <div class="title">Remaining debt</div>
        <div class="value">@RemainingDebts</div>
    </div>
</div>

<div class="tran-details">
    <div class="tran-col">
        <div class="tran-title">Total Number of Transactions</div>
        <div class="number">
            <div class="icon">
                <span class="fas fa-umbrella-beach" aria-hidden="true"></span>
            </div>
            <div class="num-value">@TotalNumberOfTransactions</div>
        </div>
    </div>

    <div class="tran-col">
        <div class="tran-title">Total Transactions</div>
        <div class="number">
            <div class="icon">
                <span class="fas fa-coins" aria-hidden="true"></span>
            </div>
            <div class="num-value">$@TotalAmountOfTransactions</div>
        </div>
    </div>
</div>

<div>
    <h3>Top 5 Highest Transactions</h3>
    <table>
        <thead>
            <tr>
                <th>SN</th>
                <th>Amount</th>
                <th>Transaction Type</th>
                <th>Tags/Source</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in HighestTransactions.Select((value, index) => new { value, index }))
            {
                <tr>
                    <td>@(transaction.index + 1)</td>
                    <td>$@transaction.value.Amount</td>
                    <td>@transaction.value.Type</td>
                    <td>@string.Join(", ", string.IsNullOrEmpty(transaction.value.Tags) ? new List<string>() : transaction.value.Tags.Split(',').ToList())</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <h3>Top 5 Lowest Transactions</h3>
    <table>
        <thead>
            <tr>
                <th>SN</th>
                <th>Amount</th>
                <th>Transaction Type</th>
                <th>Tags/Source</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in LowestTransactions.Select((value, index) => new { value, index }))
            {
                <tr>
                    <td>@(transaction.index + 1)</td>
                    <td>$@transaction.value.Amount</td>
                    <td>@transaction.value.Type</td>
                    <td>@string.Join(", ", string.IsNullOrEmpty(transaction.value.Tags) ? new List<string>() : transaction.value.Tags.Split(',').ToList())</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <h3>Pending Debts</h3>
      <div>
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="@((isSuccess ? "success" : "error"))">@message</div>
                    }
                </div>
    <table class="pending-debts-table">
        <thead>
            <tr>
                <th>Due Date</th>
                <th>Source</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in pendingDebts)
            {
                <tr>
                    <td>@debt.DebtDueDate</td>
                    <td>@debt.SourceOfDebt</td>
                    <td>$@debt.DebtAmount</td>
                    <td>
                        <button class="clear-btn" @onclick="() => ShowConfirmationModal(debt.DebtId)">Clear</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<!-- Modal -->
@if (isModalVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-container" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Confirm Debt Clearance</h3>
                <button class="close-btn" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to clear this debt?</p>
            </div>
            <div class="modal-footer">
                <button class="cancel-btn" @onclick="CloseModal">Cancel</button>
                <button class="confirm-btn" @onclick="() => ClearDebt(debtToClearId)">Confirm</button>
            </div>
        </div>
    </div>


@code {
    private int TotalInflows { get; set; }
    private int TotalOutflows { get; set; }
    private int TotalDebt { get; set; }
    private int RemainingDebts { get; set; }
    private int ClearedDebts { get; set; }
    private int TotalNumberOfTransactions { get; set; }
    private int TotalAmountOfTransactions { get; set; }
    private List<Transaction> HighestTransactions { get; set; }
    private List<Transaction> LowestTransactions { get; set; }
    private int TotalBalance { get; set; }

    private List<Debt> pendingDebts { get; set; }
    private bool isModalVisible { get; set; }
    private int debtToClearId { get; set; }
    private string message;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        TotalInflows = UserService.GetTotalInflows();
        TotalOutflows = UserService.GetTotalOutflow();
        TotalDebt = UserService.GetTotalDebt();
        TotalNumberOfTransactions = UserService.GetTotalNumberOfTransactions();
        TotalAmountOfTransactions = UserService.GetTotalTransactionsAmount();
        pendingDebts = UserService.GetPendingDebts();
        RemainingDebts = UserService.GetRemainingDebt();
        ClearedDebts = UserService.GetClearedDebt();
        TotalBalance = UserService.GetTotalBalance();

        var allTransactions = UserService.GetAllTransactions();
        HighestTransactions = allTransactions.OrderByDescending(t => t.Amount).Take(5).ToList();
        LowestTransactions = allTransactions.OrderBy(t => t.Amount).Take(5).ToList();
    }

    private void ShowConfirmationModal(int debtId)
    {
        debtToClearId = debtId;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // private async Task ClearDebt(int debtId)
    // {
    //     if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to clear this debt?" }))
    //     {
    //         Clear the debt if confirmed
    //         var debtToClear = pendingDebts.FirstOrDefault(debt => debt.DebtId == debtId);
    //         if (debtToClear != null && TotalInflows >= debtToClear.DebtAmount)
    //         {
    //             TotalInflows -= debtToClear.DebtAmount;
    //             TotalDebt -= debtToClear.DebtAmount;

    //             bool isCleared = UserService.ClearDebt(debtId);
    //             if (isCleared)
    //             {
    //                 debtToClear.isCleared = true;
    //                 pendingDebts.Remove(debtToClear);
    //                 pendingDebts = UserService.GetPendingDebts();
    //                 StateHasChanged();
    //             }
    //         }
    //     }
    //     CloseModal();
    // }

//     private async Task ClearDebt(int debtId)
// {
//     bool confirmClear = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear this debt?");
    
//     if (!confirmClear) return; Exit if user cancels
    
//     var debtToClear = pendingDebts.FirstOrDefault(debt => debt.DebtId == debtId);
//     if (debtToClear == null) return; Exit if debt is not found
    
//     Call UserService to handle the clearing logic
//     bool isCleared = UserService.ClearDebt(debtId);
    
//     if (isCleared)
//     {
//         Update UI state only if debt was successfully cleared
//         pendingDebts = UserService.GetPendingDebts(); Refresh pending debts list
//         StateHasChanged();
//     }
//     else
//     {
//         Show an error message if debt cannot be cleared due to insufficient balance
//         await JSRuntime.InvokeVoidAsync("alert", "Not enough balance to clear the debt.");
//     }
    
//     CloseModal();
// }

    private async Task ClearDebt(int debtId)
    {
      

        bool isCleared = UserService.ClearDebt(debtId);

        if (isCleared)
        {
            // Refresh UI Data
            TotalInflows = UserService.GetTotalInflows();
            TotalOutflows = UserService.GetTotalOutflow();
            TotalDebt = UserService.GetTotalDebt();
            RemainingDebts = UserService.GetRemainingDebt();
            ClearedDebts = UserService.GetClearedDebt();
            TotalBalance = UserService.GetTotalBalance();
            pendingDebts = UserService.GetPendingDebts();

            StateHasChanged();
        }
        else
        {
            message = "Not enough balance to clear the debt";
            
             // JSRuntime.InvokeVoidAsync("alert", "Not enough balance to clear the debt.");
        }

        CloseModal();
    }


}


}

<style>
    .success {
        text-align: center;
        color: green;
        font-weight: bold;
    }

    .error {
        color: red;
        text-align: center;
        font-weight: bold;
    }

    tr:hover {
        background-color: #f1f1f1;
    }


    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px auto;
    }

    th, td {
        text-align: center;
        padding: 12px;
        border: 1px solid #ddd;
    }


    th {
        background-color: #f4f4f4;
        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .clear-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 8px 12px;
        cursor: pointer;
    }

        .clear-btn:hover {
            background-color: #45a049;
        }
   
    .icon span {
        margin-right: 0.5rem;
        font-size: 1.25rem;
        color: black;
    }
    h3 {
        text-align: center;
        font-size: 24px;
        color: #333;
        margin-top: 16px;
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
    }

    .modal-body {
        margin-top: 15px;
        font-size: 16px;
        color: #333;
    }

    .modal-footer {
        margin-top: 20px;
        display: flex;
        justify-content: space-between;
    }

    .cancel-btn, .confirm-btn {
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .cancel-btn {
        background-color: #f44336;
        color: white;
        border: none;
    }

        .cancel-btn:hover {
            background-color: #d32f2f;
        }

    .confirm-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
    }

        .confirm-btn:hover {
            background-color: #45a049;
        }

    /* Overview Section */
    .overview-container {
        display: flex;
        gap: 16px;
        padding: 16px;
        justify-content: center;
        flex-wrap: wrap; 
    }

    .col {
        background: #e9e9e9;
        border-radius: 8px;
        padding: 16px;
        flex: 1;
        max-width: 200px;
        text-align: center;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .title {
        font-size: 16px;
        font-weight: bold;
        margin-bottom: 8px;
        color: #555;
    }

    .value {
        font-size: 20px;
        color: #4caf50;
        font-weight: bold;
    }

    .tran-details {
        display: flex;
        gap: 24px;
        padding: 16px;
        justify-content: center; 
        flex-wrap: wrap; 
    }

    .tran-col {
        
        border-radius: 8px;
        padding: 16px;
        width: 100%;
        max-width: 350px; 
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    .tran-title {
        font-size: 18px;
        font-weight: bold;
        color: #333;
        margin-bottom: 12px;
    }

    .number {
        
        align-items: center;
        justify-content: center;
        background: #f0f0f0;
        border-radius: 4px;
        padding: 12px;
    }

    .submission-img img {
        height: 40px;
        width: 40px;
        margin-right: 12px;
    }

    .num-value {
        font-size: 24px;
        font-weight: bold;
        color: #4caf50;
    }

    

    
</style>
