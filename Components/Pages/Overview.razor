@page "/overview"
@inject IJSRuntime JSRuntime
@using BudgetMate.Components.Services
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject BudgetMate.Components.Services.UserService UserService

<h1>Dashboard</h1>

<div class="overview-container">
   

    <div class="col">
        <div class="col-content">
            <i class="fas fa-arrow-down icon"></i>
            <div class="title">Total Inflows</div>
            <div class="value">$@TotalInflows</div>
        </div>
    </div>

    <div class="col">
        <div class="col-content">
            <i class="fas fa-arrow-up icon"></i>
            <div class="title">Total Outflows</div>
            <div class="value">$@TotalOutflows</div>
        </div>
    </div>

    <div class="col">
        <div class="col-content">
            <i class="fas fa-hand-holding-usd icon"></i>
            <div class="title">Total Debt</div>
            <div class="value">$@TotalDebt</div>
        </div>
    </div>

    <div class="col">
        <div class="col-content">
            <i class="fas fa-check-circle icon"></i>
            <div class="title">Cleared Debt</div>
            <div class="value">$@ClearedDebts</div>
        </div>
    </div>

    <div class="col">
        <div class="col-content">
            <i class="fas fa-exclamation-circle icon"></i>
            <div class="title">Remaining Debt</div>
            <div class="value">@RemainingDebts</div>
        </div>
    </div>
</div>


<div class="tran-details">
    <div class="tran-col">
        <div class="tran-title">Total Number of Transactions</div>
        <div class="number">
            <div class="icon">
                <span class="fas fa-umbrella-beach" aria-hidden="true"></span>
            </div>
            <div class="num-value">@TotalNumberOfTransactions</div>
        </div>
    </div>

    <div class="tran-col">
        <div class="tran-title">Total Transactions</div>
        <div class="number">
            <div class="icon">
                <span class="fas fa-coins" aria-hidden="true"></span>
            </div>
            <div class="num-value">$@TotalAmountOfTransactions</div>
        </div>
    </div>
</div>

<div class="grid-container">
    <div>
        <h3 class="table-title">Highest Transactions</h3>
        <table class="styled-table">
            <thead>
                <tr>
                    <th>S.N</th>
                    <th>Amount</th>
                    <th>Transaction Type</th>
                    <th>Tags</th>
                </tr>
            </thead>
            <tbody>
                @if (HighestTransactions == null || !HighestTransactions.Any())
                {
                    <tr>
                        <td colspan="4" class="no-transactions-message">No transactions available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in HighestTransactions.Select((value, index) => new { value, index }))
                    {
                        <tr>
                            <td>@(transaction.index + 1)</td>
                            <td>$@transaction.value.Amount</td>
                            <td>@transaction.value.Type</td>
                            <td>@string.Join(", ", string.IsNullOrEmpty(transaction.value.Tags) ? new List<string>() : transaction.value.Tags.Split(',').ToList())</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div>
        <h3 class="table-title">Lowest Transactions</h3>
        <table class="styled-table">
            <thead>
                <tr>
                    <th>S.N</th>
                    <th>Amount</th>
                    <th>Transaction Type</th>
                    <th>Tags</th>
                </tr>
            </thead>
            <tbody>
                @if (LowestTransactions == null || !LowestTransactions.Any())
                {
                    <tr>
                        <td colspan="4" class="no-transactions-message">No transactions available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in LowestTransactions.Select((value, index) => new { value, index }))
                    {
                        <tr>
                            <td>@(transaction.index + 1)</td>
                            <td>$@transaction.value.Amount</td>
                            <td>@transaction.value.Type</td>
                            <td>@string.Join(", ", string.IsNullOrEmpty(transaction.value.Tags) ? new List<string>() : transaction.value.Tags.Split(',').ToList())</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


<div class="pending-debts-container">
    <h3 class="table-title">Pending Debts</h3>

   
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="@((isSuccess ? "success" : "error"))">@message</div>
    }

    <table class="styled-table">
        <thead>
            <tr>
                <th>Due Date</th>
                <th>Source</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (pendingDebts == null || !pendingDebts.Any())
            {
                <tr>
                    <td colspan="4" class="no-debts-message">No debts to clear.</td>
                </tr>
            }
            else
            {
                @foreach (var debt in pendingDebts)
                {
                    <tr>
                        <td>@debt.DebtDueDate</td>
                        <td>@debt.SourceOfDebt</td>
                        <td>$@debt.DebtAmount</td>
                        <td>
                            <button class="clear-btn" @onclick="() => ShowConfirmationModal(debt.DebtId)">Clear</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>




@if (isModalVisible)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-container" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Confirm Debt Clearance</h3>
                <button class="close-btn" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to clear this debt?</p>
            </div>
            <div class="modal-footer">
                <button class="cancel-btn" @onclick="CloseModal">Cancel</button>
                <button class="confirm-btn" @onclick="() => ClearDebt(debtToClearId)">Confirm</button>
            </div>
        </div>
    </div>


@code {
    private int TotalInflows { get; set; }
    private int TotalOutflows { get; set; }
    private int TotalDebt { get; set; }
    private int RemainingDebts { get; set; }
    private int ClearedDebts { get; set; }
    private int TotalNumberOfTransactions { get; set; }
    private int TotalAmountOfTransactions { get; set; }
    private List<Transaction> HighestTransactions { get; set; }
    private List<Transaction> LowestTransactions { get; set; }
    private int TotalBalance { get; set; }

    private List<Debt> pendingDebts { get; set; }
    private bool isModalVisible { get; set; }
    private int debtToClearId { get; set; }
    private string message;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        TotalInflows = UserService.GetTotalInflows();
        TotalOutflows = UserService.GetTotalOutflow();
        TotalDebt = UserService.GetTotalDebt();
        TotalNumberOfTransactions = UserService.GetTotalNumberOfTransactions();
        TotalAmountOfTransactions = UserService.GetTotalTransactionsAmount();
        pendingDebts = UserService.GetPendingDebts();
        RemainingDebts = UserService.GetRemainingDebt();
        ClearedDebts = UserService.GetClearedDebt();
        TotalBalance = UserService.GetTotalBalance();

        var allTransactions = UserService.GetAllTransactions();
        HighestTransactions = allTransactions.OrderByDescending(t => t.Amount).Take(5).ToList();
        LowestTransactions = allTransactions.OrderBy(t => t.Amount).Take(5).ToList();
    }

    private void ShowConfirmationModal(int debtId)
    {
        debtToClearId = debtId;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    // private async Task ClearDebt(int debtId)
    // {
    //     if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to clear this debt?" }))
    //     {
    //         Clear the debt if confirmed
    //         var debtToClear = pendingDebts.FirstOrDefault(debt => debt.DebtId == debtId);
    //         if (debtToClear != null && TotalInflows >= debtToClear.DebtAmount)
    //         {
    //             TotalInflows -= debtToClear.DebtAmount;
    //             TotalDebt -= debtToClear.DebtAmount;

    //             bool isCleared = UserService.ClearDebt(debtId);
    //             if (isCleared)
    //             {
    //                 debtToClear.isCleared = true;
    //                 pendingDebts.Remove(debtToClear);
    //                 pendingDebts = UserService.GetPendingDebts();
    //                 StateHasChanged();
    //             }
    //         }
    //     }
    //     CloseModal();
    // }

//     private async Task ClearDebt(int debtId)
// {
//     bool confirmClear = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear this debt?");
    
//     if (!confirmClear) return; Exit if user cancels
    
//     var debtToClear = pendingDebts.FirstOrDefault(debt => debt.DebtId == debtId);
//     if (debtToClear == null) return; Exit if debt is not found
    
//     Call UserService to handle the clearing logic
//     bool isCleared = UserService.ClearDebt(debtId);
    
//     if (isCleared)
//     {
//         Update UI state only if debt was successfully cleared
//         pendingDebts = UserService.GetPendingDebts(); Refresh pending debts list
//         StateHasChanged();
//     }
//     else
//     {
//         Show an error message if debt cannot be cleared due to insufficient balance
//         await JSRuntime.InvokeVoidAsync("alert", "Not enough balance to clear the debt.");
//     }
    
//     CloseModal();
// }

    private async Task ClearDebt(int debtId)
    {
      

        bool isCleared = UserService.ClearDebt(debtId);

        if (isCleared)
        {
            // Refresh UI Data
            TotalInflows = UserService.GetTotalInflows();
            TotalOutflows = UserService.GetTotalOutflow();
            TotalDebt = UserService.GetTotalDebt();
            RemainingDebts = UserService.GetRemainingDebt();
            ClearedDebts = UserService.GetClearedDebt();
            TotalBalance = UserService.GetTotalBalance();
            pendingDebts = UserService.GetPendingDebts();

            StateHasChanged();
        }
        else
        {
            message = "Not enough balance to clear the debt";
            
             // JSRuntime.InvokeVoidAsync("alert", "Not enough balance to clear the debt.");
        }

        CloseModal();
    }


}


}

<style>

   
    
</style>
