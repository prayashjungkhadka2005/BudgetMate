@page "/register"
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using BudgetMate.Components.Services
@inject UserService UserService



@layout FirstLayout

<style>
    .signup-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .signup-header {
        text-align: center;
        margin-bottom: 1.5rem;
        width: 100%;
        max-width: 28rem;
        color: white;
    }

        .signup-header h1 {
            font-size: 1.875rem;
            font-weight: 700;
        }

    .signup-form-container {
        background-color: #ffffff;
        padding: 2.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            font-size: 0.875rem;
            font-weight: 500;
            color: #4a5568;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            padding: 0.5rem;
            margin-top: 0.25rem;
            outline: none;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

            .form-group input:focus,
            .form-group select:focus {
                border-color: #FE6C05;
                box-shadow: 0 0 0 3px rgba(254, 108, 5, 0.3);
            }

    .signup-button {
        width: 100%;
        background-color: #FE6C05;
        color: #ffffff;
        font-size: 18px;
        font-weight: 300;
        border-radius: 0.375rem;
        padding: 0.75rem;
        margin-top: 1rem;
        cursor: pointer;
        border: none;
    }

     
        

    .login {
        text-align: center;
        margin-top: 1rem;
    }

        .login span {
            color: darkblue;
            font-weight: bold;
            cursor: pointer;
        }
</style>

<div class="signup-container">
    <div class="signup-header">
        <h1>Signup for Free</h1>
    </div>

    <div class="signup-form-container">
        <form>
            <div class="form-group">
                @if (!string.IsNullOrEmpty(message))
                {
                    <p style="color: @(isSuccess ? "green" : "red"); padding-top:1rem; text-align: center;">@message</p>
                }
            </div>
            
            <div class="form-group">
                <label for="Username">Username</label>
                <input type="text" @bind="username" id="Username" placeholder="Enter your username" />
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" @bind="password" id="Password" placeholder="Enter your password" />
            </div>

            <div class="form-group">
                <label for="Currency">Select Currency</label>
                <select id="Currency" @bind="currency">
                    <option value="" disabled selected>Select your currency</option>
                    <option value="NPR">NPR - Nepalese Rupees</option>
                    <option value="USD">USD - United States Dollar</option>
                    <option value="EUR">EUR - Euro</option>
                    <option value="INR">INR - Indian Rupee</option>
                </select>
            </div>

            <button type="button" class="signup-button" @onclick="RegisterUser" > Signup Now
            </button>

            <div class="login">
                Already Registered? <span> <a href="login" style="text-decoration: none">Login</a></span>
            </div>

           
        </form>
    </div>
</div>


@code {
    private string username;
    private string password;
    private string currency;
    private string message;
    private bool isLoading = false;
    private bool isSuccess = false;

    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(currency))
        {
            message = "All fields are required.";
            isSuccess = false;
            return;
        }


        try
        {
            var user = new User
                {
                    Username = username,
                    Password = password,
                    PreferredCurrency = currency
                };

            bool success = UserService.RegisterUser(user);

            if (success)
            {
                message = "Registration successful!";
                isSuccess = true;

                username = string.Empty;
                password = string.Empty;
                currency = string.Empty;

                await Task.Delay(100); 
                NavigationManager.NavigateTo("/overview");
            }
            else
            {
                message = "Username already exists. Please choose a different username.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
            isSuccess = false;
        }
        
    }
}
