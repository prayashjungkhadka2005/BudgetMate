@page "/transactions"
@using BudgetMate.Components.Services
@using BudgetMate.Components.Layout
@using BudgetMate.Components.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Forms
@using BudgetMate.Components.Services
@inject BudgetMate.Components.Services.UserService UserService
@inject IJSRuntime JSRuntime



<h3>Transactions</h3>

<div class="transaction-container">
    <div class="transaction-box">
        <form>
            <div class="transaction-row">
                <div class="trow-field">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="@((isSuccess ? "success" : "error"))">@message</div>
                    }
                </div>
            </div>


            <div class="transaction-row">
                <div class="trow-title">Transaction Type</div>
                <div class="trow-field">
                    <select name="transaction-type" id="transaction-type" @bind="transactiontype">
                        <option value="" disabled selected>Select your transaction type</option>
                        <option value="expense">Debit</option>
                        <option value="income">Credit</option>
                        <option value="debt">Debt</option>
                    </select>
                </div>
            </div>

            <div class="transaction-row">
                <div class="trow-title">Transaction Title</div>
                <div class="trow-field">
                    <input type="text" @bind="transactiontitle" placeholder="Office Rent" id="transaction-title">
                </div>
            </div>

            <div id="due-date-row" class="transaction-row" style="display: none;">
                <div class="trow-title">Due Date</div>
                <div class="trow-field">
                    <input @bind="debtduedate" type="date" id="due-date-picker">
                </div>
            </div>

            <div class="transaction-row">
                <div class="trow-title">Amount</div>
                <div class="trow-field">
                    <input @bind="transactionamount" type="text" placeholder="$100" id="transaction-amount">
                </div>
            </div>

            <div id="source-of-debt-row" class="transaction-row" style="display: none;">
                <div class="trow-title">Source of Debt</div>
                <div class="trow-field">
                    <input @bind="sourceofdebt" type="text" placeholder="Enter Source of Debt" id="source-of-debt">
                </div>
            </div>

            <div id="tags-row" class="transaction-row">
                <div class="trow-title">Tags</div>
                <div class="trow-field" id="tags-container">
                    <!-- tags are updated here -->
                </div>

                <div class="custom-tag-input" style="display: none;">
                    <input @bind="customtag" type="text" placeholder="Enter custom tag..." id="custom-tag-input">
                </div>
            </div>

            <div class="transaction-row">
                <div class="trow-field">
                    <button @onclick="HandleSubmit" type="button">Submit</button>
                </div>
            </div>
        </form>
    </div>
</div>

@code {
    private string transactiontype = "expense"; // Or set the default to "debt" if you want it to show by default
    private string transactiontitle;
    private int transactionamount;
    private DateTime debtduedate = DateTime.MinValue;
    private string sourceofdebt;
    private string customtag;
    private string message;
    private bool isSuccess = false;
    private static string selectedTag;
    private int currentBalance;
    protected override void OnInitialized()
    {
        var now = DateTime.Now;
        debtduedate = new DateTime(now.Year, now.Month, 1); //default to current month
        currentBalance = UserService.GetTotalBalance();
    }

    [JSInvokable]
    public static void SetSelectedTag(string tag)
    {
        selectedTag = tag;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(transactiontitle) || transactionamount <= 0)
        {
            message = "Transaction title and amount are required.";
            isSuccess = false;
            return;
        }

        if (transactiontype == "debt" && debtduedate == DateTime.MinValue)
        {
            message = "Please select a valid due date for debt.";
            isSuccess = false;
            return;
        }

        string transactionTags = !string.IsNullOrEmpty(customtag) ? customtag : selectedTag;

        if (string.IsNullOrEmpty(transactionTags))
        {
            message = "Please select or enter a tag.";
            isSuccess = false;
            return;
        }
        
        var success = false;
        if (transactiontype == "expense")
        {
            var date = DateTime.Now;

            var newDebit = new Debit
                {
                    DebitTransactionTitle = transactiontitle,
                    DebitAmount = transactionamount,
                    DebitTags = transactionTags,
                    DebitTransactionDate = date.ToString("yyyy-MM-dd"),
                };
            success = UserService.AddDebitTransaction(newDebit);
            if (!success)
            {
                message = "Insufficient balance";
                isSuccess = false;
                return;
            }
        }
        else if (transactiontype == "income")
        {
            var date = DateTime.Now;
            var newCredit = new Credit
                {
                    CreditTransactionTitle = transactiontitle,
                    CreditAmount = transactionamount,
                    CreditTags = transactionTags,
                    CreditTransactionDate = date.ToString("yyyy-MM-dd"),
                };
            success = UserService.AddCreditTransaction(newCredit);
        }
        else if (transactiontype == "debt")
        {
            var date = DateTime.Now;
            bool isCleared = false;
            var newDebt = new Debt
                {
                    DebtTransactionTitle = transactiontitle,
                    DebtAmount = transactionamount,
                    DebtDueDate = debtduedate.ToString("yyyy-MM-dd"),
                    SourceOfDebt = sourceofdebt,
                    DebtTransactionDate = date.ToString("yyyy-MM-dd"),
                    isCleared = isCleared,
                };
            success = UserService.AddDebtTransaction(newDebt);
        }

        if (success)
        {
            message = $"{transactiontype} transaction added successfully!";
            isSuccess = true;
            ClearForm();
        }
        else
        {
            message = $"Failed to add {transactiontype} transaction.";
            isSuccess = false;
        }
    }

    private void ClearForm()
    {
        transactiontitle = string.Empty;
        transactionamount = 0;
        customtag = string.Empty;
        sourceofdebt = string.Empty;
        debtduedate = DateTime.MinValue;
    }
}

<script>
 (function () {
         let selectedTag;
        const transactionTypeSelect = document.getElementById('transaction-type');
    const tagsRow = document.getElementById('tags-row');
    const tagsContainer = document.getElementById('tags-container');
    const customTagInput = document.querySelector('.custom-tag-input');
    const customTagInputField = document.getElementById('custom-tag-input');
    const dueDateRow = document.getElementById('due-date-row');
    const sourceOfDebtRow = document.getElementById('source-of-debt-row');

    function updateFormFields() {
        const selectedType = transactionTypeSelect.value;

        tagsContainer.innerHTML = '';  // clear existing tags
        customTagInput.style.display = 'none';
        dueDateRow.style.display = selectedType === 'debt' ? 'block' : 'none';
        sourceOfDebtRow.style.display = selectedType === 'debt' ? 'block' : 'none';
        tagsRow.style.display = selectedType === 'debt' ? 'none' : 'block';

        let tags = [];
        if (selectedType === 'expense') {
            tags = ['Clothes', 'Rent', 'Groceries'];
        } else if (selectedType === 'income') {
            tags = ['Salary', 'Gifts', 'Savings', 'Refunds'];
        }

            tags.forEach(tag => {
        const tagButton = document.createElement('div');
        tagButton.classList.add('tag-button');
        tagButton.textContent = tag;
        tagButton.onclick = () => toggleTag(tagButton);
        tagsContainer.appendChild(tagButton);
    });

    if (selectedType !== 'debt') {
        const customTagButton = document.createElement('div');
        customTagButton.classList.add('tag-button');
        customTagButton.textContent = 'Custom Tag';
        customTagButton.onclick = () => toggleTag(customTagButton, true);
        tagsContainer.appendChild(customTagButton);
    }

    }

    function toggleTag(button, isCustom) {
        const allTags = document.querySelectorAll('.tag-button');
        allTags.forEach(tag => tag.classList.remove('selected'));

        button.classList.toggle('selected');

        customTagInput.style.display = isCustom && button.classList.contains('selected') ? 'block' : 'none';

        if (!isCustom || !button.classList.contains('selected')) {
            customTagInputField.value = '';
        }

       
    if (isCustom && customTagInputField.value) {  // update the custom tag if the custom input field is filled
        selectedTag = customTagInputField.value; // store the custom tag
    } else if (!isCustom) {
        selectedTag = button.textContent; // store the predefined tag
    }

   
       DotNet.invokeMethodAsync('BudgetMate', 'SetSelectedTag', selectedTag);      // uses JS Interop to send the selectedTag back to Blazor

    }

    updateFormFields();  // rendering the initial tags
    transactionTypeSelect.addEventListener('change', updateFormFields);
})();



</script>

<style>
    .success {
    color: green;
    font-weight: bold;
}

.error {
    color: red;
    font-weight: bold;
}

    .tag-button {
        border: 0.5px solid #293198;
        display: inline-block;
        padding: 5px 14px;
        margin: 0;
        background-color: white;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        color: #293198;
    }

        .tag-button.selected {
            background-color: #293198;
            color: white;
            border-color: #293198;
        }

    #tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .transaction-row {
        margin-bottom: 15px;
    }

    .custom-tag-input {
        margin-top: 10px;
    }

    input[type="text"], input[type="date"], select {
        border: 1px solid #293198;
        border-radius: 6px;
        padding: 8px;
        box-sizing: border-box;
        font-size: 14px;
        color: #293198;
    }

        input[type="text"]::placeholder, input[type="date"]::placeholder {
            color: #999;
        }

        input[type="text"]:focus, input[type="date"]:focus, select:focus {
            outline: none;
            border-color: #293198;
            box-shadow: 0 0 5px rgba(41, 49, 152, 0.5);
        }

        input[type="date"]::-webkit-calendar-picker-indicator {
            border-radius: 50%;
            padding: 5px;
            cursor: pointer;
        }

    select {
        background-color: white;
    }
</style>

